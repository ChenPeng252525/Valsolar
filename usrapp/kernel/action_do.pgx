<?xml version="1.0" encoding="utf-8" ?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2" >
  <Program name="action_do" access="private" >
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1" >
      <Parameter name="x_aAction" type="ActionItem" use="reference" xsi:type="array" dimensions="1" />
      <Parameter name="x_nIndex" type="num" use="value" xsi:type="element" dimensions="1" />
    </Parameters>
    <Locals>
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="j" type="num" xsi:type="array" size="1" />
      <Local name="l_bExit" type="bool" xsi:type="array" size="1" />
      <Local name="l_nClock" type="num" xsi:type="array" size="1" />
      <Local name="l_nDistance" type="num" xsi:type="array" size="1" />
      <Local name="l_nResult" type="num" xsi:type="array" size="1" />
      <Local name="l_sData" type="string" xsi:type="array" size="1" />
      <Local name="l_sEmpty" type="string" xsi:type="array" size="1" />
      <Local name="l_sInstr" type="string" xsi:type="array" size="1" />
      <Local name="l_sInstruction" type="string" xsi:type="array" size="1" />
      <Local name="l_sType" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // check if not empty...
  if x_aAction.iInstr[0].sType!="" or x_aAction.iInstr[1].sType!="" or x_aAction.iInstr[2].sType!=""
    if saveData:bDebug
      ? "ACTION INSERT,"+x_aAction.iInstr.sType+" "+x_aAction.iInstr.sData+",ID="+toString(".3",getMoveId())+","+toString(".3",clock()-cycleStatus:nTime)+",x_ID="+toString("",x_aAction.nMoveId)+",x_Dist="+toString(".2",x_aAction.nDistance)
    endIf
    l_nClock=clock()
    // wait the correct moveID
    wait((x_aAction.nMoveId+x_aAction.nDistance)<=getMoveId() or (isEmpty()) and !cycleStatus:bPause)
    // look if there are several sAction in the traj
    for i=0 to (size(x_aAction.iInstr)-1)
      // check for not empty space
      if x_aAction.iInstr[i].sType!=""
        // get the instruction
        l_sData=x_aAction.iInstr[i].sData
        l_sType=x_aAction.iInstr[i].sType
        call saveInOut:replaceIO(l_sData,l_sType,l_sData)
        l_sInstr=l_sType+" "+l_sData
        if saveData:bDebug
          ? "ACTION RUNNING,"+l_sInstr+",ID="+toString(".3",getMoveId())+","+toString(".3",clock()-cycleStatus:nTime)+",MoveID="+toString("",x_aAction.nMoveId)+",Dist="+toString(".2",x_aAction.nDistance)
        endIf
        // PRINT LOG
        if cycleStatus:bCycle
          if x_aAction.nPointId!=-1
            // is inside a trajectory
            call cycleStatus:printLog(" ."+l_sInstr)
          else
            // is outside a trajectory
            call cycleStatus:printLog("-"+l_sInstr)
          endIf
        endIf
        cycleStatus:sToShow=l_sInstr
        cycleStatus:sLastAction=l_sInstr
        if x_aAction.nPointId==-1
          // refresh the LINE of the program...
          cycleStatus:bTraj=false
          cycleStatus:nEvent=x_nIndex
        endIf
        //
        // RUN THE ACTION
        //
        call memory_onRun(x_aAction.iInstr[i])
      endIf
    endFor
    // release
    cycleStatus:sToShow=""
  endIf
end]]></Code>
  </Program>
</Programs>