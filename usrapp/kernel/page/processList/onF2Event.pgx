<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="onF2Event">
    <Locals>
      <Local name="l_nSize" type="num" xsi:type="array" size="3" />
      <Local name="l_sEvent" type="string" xsi:type="array" size="1" />
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_sProg" type="string" xsi:type="array" size="1" />
      <Local name="l_nDone" type="num" xsi:type="array" size="1" />
      <Local name="l_nTotal" type="num" xsi:type="array" size="1" />
      <Local name="l_nType" type="num" xsi:type="array" size="1" />
      <Local name="l_bLoop" type="bool" xsi:type="array" size="1" />
      <Local name="l_sType" type="num" xsi:type="array" size="1" />
      <Local name="l_sEmpty" type="string" xsi:type="array" size="1" />
      <Local name="l_sMessage" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  do
    cls()
    call language:message(l_sMessage,76)
    title("< "+l_sMessage+" >")
    call use:setView(true)
    // INIT the list
    l_sEmpty=""
    call use:stringCopy(l_sEmpty,sList)
    // get the LOOP
    call processList:getLoop(l_bLoop)
    // Build the list
    for i=0 to 2
      call processList:getSize(l_nSize[i],i)
    endFor
    //
    for l_nType=0 to 2
      switch l_nType
        case 0
          // START LIST
          call language:message(l_sMessage,72)
          l_sEmpty=(" "+l_sMessage)
          call use:strfill(l_sEmpty,17,l_sEmpty)
          l_sEmpty=l_sEmpty+":"
        break
        case 1
          call listAdd(" ")
          call language:message(l_sMessage,73)
          l_sEmpty=(" "+l_sMessage)
          call use:strfill(l_sEmpty,17,l_sEmpty)
          l_sEmpty=l_sEmpty+":"
          call processList:getLoop(l_bLoop)
        break
        case 2
          call listAdd(" ")
          call language:message(l_sMessage,74)
          l_sEmpty=(" "+l_sMessage)
          call use:strfill(l_sEmpty,17,l_sEmpty)
          l_sEmpty=l_sEmpty+":"
        break
      endSwitch
      //
      if l_nSize[l_nType]>0
        for i=0 to (l_nSize[l_nType]-1)
          if i!=0
            call use:strfill("",17,l_sEmpty)
          endIf
          // get the info
          call processList:getCycle(l_sProg,l_nTotal,l_nDone,i,l_nType)
          // if exist
          if l_sProg!=""
            // cycle done
            l_sEvent=(" "+toString("1",l_nDone)+"/"+toString("1",l_nTotal))
            if l_nType!=1 or !l_bLoop
              call listAdd(l_sEmpty+"   "+l_sProg+l_sEvent)
            else
              if l_nSize[1]==1
                call listAdd(l_sEmpty+"@> "+l_sProg+l_sEvent)
              else
                if i==0
                  call listAdd(l_sEmpty+"┌> "+l_sProg+l_sEvent)
                else
                  if i!=(l_nSize[l_nType]-1)
                    call listAdd(l_sEmpty+"││ "+l_sProg+l_sEvent)
                  else
                    call listAdd(l_sEmpty+"└┘ "+l_sProg+l_sEvent)
                  endIf
                endIf
              endIf
            endIf
          else
            // ONLY THE TAG
            call listAdd(l_sEmpty)
          endIf
        endFor
      endIf
    endFor
    // BUILD LIST
    call use:listcreate("")
    call use:listadd(sList)
    call use:listupdate(0)
    call language:message(l_sMessage,75)
    call use:type(40-getDisplayLen(l_sMessage),13,l_sMessage)
    //
    //
    do
      nKey=get()
      call use:listevent(nKey,nIndex,sEvent)
      if nKey==278
        for i=0 to 2
          call processList:deleteAll(i)
          // TO DO END CYCLE?
        endFor
      endIf
    until nKey==278 or nKey==255
  until nKey==255
  // refresh
  use:bUseRefresh=true
  call use:nullKey(nKey)
end
]]></Code>
  </Program>
</Programs>