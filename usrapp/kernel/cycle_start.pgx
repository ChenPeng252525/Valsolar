<?xml version="1.0" encoding="utf-8" ?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2" >
  <Program name="cycle_start" access="private" >
    <Locals>
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_bContinue" type="bool" xsi:type="array" size="1" />
      <Local name="l_bLoop" type="bool" xsi:type="array" size="1" />
      <Local name="l_nDone" type="num" xsi:type="array" size="1" />
      <Local name="l_nLoading" type="num" xsi:type="array" size="1" />
      <Local name="l_nSize" type="num" xsi:type="array" size="1" />
      <Local name="l_nTotal" type="num" xsi:type="array" size="1" />
      <Local name="l_sEmpty" type="string" xsi:type="array" size="1" />
      <Local name="l_sItem" type="string" xsi:type="array" size="1" />
      <Local name="l_sLoadProg" type="string" xsi:type="array" size="1" />
      <Local name="l_sMessage" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  //
  // INIT AND REFRESH
  //
  // START THE CYCLE....
  resetMotion()
  logMsg("[KERNEL] CYCLE:Ready to Start")
  call cycle_version()
  // check compatibility
  if cycleStatus:nToSuperV!=4
    // send the ready to go
    //
    //  INIT CYCLE
    //
    // INIT the action log
    call cycleStatus:init_logAction()
    do
      // get the size
      call processList:getSize(l_nSize,cycleStatus:nProcessType)
      // check the size
      if cycleStatus:nProg<l_nSize or (saveData:bPlcEnable and cycleStatus:nProcessType==1)
        // wait a program...
        if (saveData:bPlcEnable and cycleStatus:nProcessType==1)
          do
            call processList:getSize(l_nSize,1)
            if isEmpty() and cycleStatus:bWait==false and isPowered() and cycleStatus:nWorkingStatus==0
              call language:message(l_sMessage,33)
              call language:message(l_sItem,-18)
              l_sMessage=l_sMessage+l_sItem
              call language:message(l_sItem,70)
              l_sMessage=l_sMessage+" "+l_sItem
              cycleStatus:sToShow=l_sMessage
            endIf
            delay(0)
          until cycleStatus:nProg<l_nSize or cycleStatus:bEnding
        endIf
        // look if the hold key was pressed
        wait(cycleStatus:nWorkingStatus==0)
        //
        // START ALL THE PROGRAM IN THE PROCESS LIST
        //
        call processList:getCycle(l_sLoadProg,l_nTotal,l_nDone,cycleStatus:nProg,cycleStatus:nProcessType)
        for i=l_nDone to (l_nTotal-1)
          // update the value
          call processList:getCycle(l_sLoadProg,l_nTotal,l_nDone,cycleStatus:nProg,cycleStatus:nProcessType)
          // load it
          call prog:loadCycle(l_sLoadProg,l_nLoading)
          if l_nLoading!=0
            // program not found...
            popUpMsg("program not found")
            return
          endIf
          call prog:getProgItem(pProg,l_sLoadProg)
          logMsg("[KERNEL] CYCLE:Execute the program: "+l_sLoadProg)
          // DO THE REFRESH
          cycleStatus:nTime=clock()
          // PROGRAM STARTED
          call OnEvent:OnCycleEvent(19)
          //
          // RUN IT
          //
          call cycle_run(pProg)
          // update all the data
          cycleStatus:nCycleTime=clock()-cycleStatus:nTime
          //increase the prog done value
          call processList:increase(cycleStatus:nProcessType)
          // check the end of Cycle
          if cycleStatus:bEnding and cycleStatus:nProcessType!=2 and l_nSize==1
            // endCycle
            i=l_nTotal
          endIf
          // WELL DONE
          call OnEvent:OnCycleEvent(14)
          call memory_onEnd()
          // reloop
        endFor
        // UPDATE
        call processList:getLoop(l_bLoop)
        call processList:getSize(l_nSize,1)
        if cycleStatus:bEnding and cycleStatus:nProcessType==1 and ((l_bLoop and cycleStatus:nProg>=max(l_nSize-1,0)) or !l_bLoop)
          // endCycle
          cycleStatus:nProcessType=2
          cycleStatus:nProg=0
          l_sLoadProg=""
        else
          // update the list
          if cycleStatus:nProcessType==1
            // remove from the list
            call processList:loopMode()
          else
            // go to next one
            cycleStatus:nProg=cycleStatus:nProg+1
          endIf
        endIf
      else
        // clear the list go to next
        l_sLoadProg=""
        cycleStatus:nProg=0
        cycleStatus:nProcessType=cycleStatus:nProcessType+1
      endIf
      delay(0)
    until cycleStatus:nProcessType>2
    //
    // wait the end of all
    //
    call cycle_waitEmpty()
    call OnEvent:OnCycleEvent(8)
  else
    // no power
    call language:message(l_sMessage,230)
    popUpMsg(l_sMessage)
  endIf
end]]></Code>
  </Program>
</Programs>