<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="editAction">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_bSave" type="bool" xsi:type="array" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_sMessage" type="string" xsi:type="array" size="1" />
      <Local name="l_bOk" type="bool" xsi:type="array" size="1" />
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_nKey" type="num" xsi:type="array" size="1" />
      <Local name="l_nIndex" type="num" xsi:type="array" size="1" />
      <Local name="l_sButton" type="string" xsi:type="array" size="2" />
      <Local name="l_nSize" type="num" xsi:type="array" size="1" />
      <Local name="l_nLocal" type="num" xsi:type="array" size="1" />
      <Local name="l_sEvent" type="string" xsi:type="array" size="1" />
      <Local name="l_sEmpty" type="string" xsi:type="array" size="1" />
      <Local name="l_tTraj" type="TrajectoryItem" xsi:type="array" size="1" />
      <Local name="l_iInstr" type="InstrItem" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // loop
  do 
    // get the instruction
    call trajType:getTrajItem(l_tTraj,nIndex)
    // refresh
    call refreshAction(l_tTraj,l_nIndex)
    call use:typeMenu(8,"OK")
    // get the key
    l_nKey=get()
    call use:listevent(l_nKey,l_nIndex,l_sEvent)
    call use:findPos(l_sEvent,">",i)
    i=i+3
    switch l_nKey
      // ENTER
      case 270
        // reverse video
        call use:listcursor(l_nIndex,false)
        switch l_nIndex
          case 0
            //
            //  put a stop, after the robot reach to the point
            //
            l_nLocal=l_tTraj.nStop
            call use:changeValue(l_nLocal,-1,100,i+use:nTopX,use:nView+use:nTopY+1,l_sEmpty)
            //
            if l_nLocal<0
              // no stop
              l_tTraj.toStop=false
              l_tTraj.nStop=0
            else
              // stop using time
              l_tTraj.toStop=true
              l_tTraj.nStop=l_nLocal
            endIf
          break
          case 1
            //
            // set TCP ON/OFF
            //
            // NB: 0>NONE 1>ON 2>OFF 
            call use:stringToArray("ON,OFF",sMessage)
            if l_tTraj.nTcpAction!=0 and abs(l_tTraj.nTcpAction)<3
              // NOTE 
              // use only absolute
              l_tTraj.nTcpAction=abs(l_tTraj.nTcpAction)-1
            else
              l_tTraj.nTcpAction=0
            endIf
            call use:changeValue(l_tTraj.nTcpAction,0,0,i+use:nTopX,use:nView+use:nTopY+1,sMessage)
            // give back increase by one
            l_tTraj.nTcpAction=l_tTraj.nTcpAction+1
          break
          case 2,3,4
            //
            //  edit the instruction
            //
            // insert a new one
            if l_tTraj.iInstr[l_nIndex-2].sType==""
              call insertInstr(l_iInstr)
              if l_sMessage!=""
                l_tTraj.iInstr[l_nIndex-2]=l_iInstr
              endIf
            else
              // delete 
              call language:message(l_sMessage,171)
              call language:getYesNo(l_sButton)
              // ask the yes_no question
              call use:yes_no(l_sMessage,l_sButton,l_bOk)
              if l_bOk
                l_tTraj.iInstr[l_nIndex-2].sType=""
                l_tTraj.iInstr[l_nIndex-2].sData=""
              endIf
            endIf
          break
        endSwitch
        // save the last things
        x_bSave=true
        // copy back
        call trajType:setTrajItem(l_tTraj,nIndex)
      break
      // SPACE
      case 32
        switch l_nIndex
          call use:listcursor(l_nIndex,false)
          case 0
            // STOP
            l_tTraj.toStop=!l_tTraj.toStop
          break
          case 1
            // TCP
            if l_tTraj.nTcpAction!=0
              l_tTraj.nTcpAction=-l_tTraj.nTcpAction
            else
              // ON by default
              l_tTraj.nTcpAction=1
            endIf
          break
          default
          break
        endSwitch
        x_bSave=true
        // copy back
        call trajType:setTrajItem(l_tTraj,nIndex)
      break
      // LEFT
      case 264
        // BACK
        if nIndex>0
          nIndex=nIndex-1
        endIf
      break
      // RIGHT
      case 268
        // FORWARD
        call trajType:getSizeItem(false,l_nSize)
        if nIndex<l_nSize-1
          nIndex=nIndex+1
        endIf
      break
    endSwitch
    // use left to go bak or escape to no validate
  until l_nKey==278
  // release
  call use:nullKey(nKey)
end]]></Code>
  </Program>
</Programs>