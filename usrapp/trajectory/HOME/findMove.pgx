<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="findMove">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nIndex" type="num" xsi:type="element" />
      <Parameter name="x_tTool" type="tool" xsi:type="element" />
      <Parameter name="x_nMoveType" type="num" xsi:type="array" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_pHere" type="point" xsi:type="array" size="1" />
      <Local name="l_nResult" type="num" xsi:type="array" size="1" />
      <Local name="l_nIndexTool" type="num" xsi:type="array" size="1" />
      <Local name="l_nSize" type="num" xsi:type="array" size="1" />
      <Local name="l_nMoveType" type="num" xsi:type="array" size="1" />
      <Local name="l_pPoint" type="point" xsi:type="array" size="2" />
      <Local name="l_jHere" type="joint" xsi:type="array" size="1" />
      <Local name="l_bUnreach" type="bool" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  //
  // MOVE TO THE POINT
  //
  // use the flange
  x_tTool=flange
  // get all the value that you need
  l_nSize=size(jEditPoint.tData)
  l_pHere=here(x_tTool,world)
  // get the point and the circle point
  call getPoint(l_pPoint,false,x_nIndex)
  pPoints[1].trsf=position(l_pPoint,world)
  pPoints[2].trsf={0,0,0,0,0,0}
  // Set to JOINT for default
  x_nMoveType=0
  // get the move TYPE
  call getMoveType(l_nMoveType,x_nIndex,false)
  //
  // move forward 
  //
  if x_nIndex>0 and l_nMoveType==1
    // get the point and the circle point
    call getPoint(l_pPoint,false,x_nIndex-1)
    pPoints.trsf=position(l_pPoint,world)
    if distance(l_pHere,pPoints)<25
      // set to linear
      x_nMoveType=1
    elseIf setFrame(pPoints,pPoints[1],pPoints[2],fSetFrame)==0
      // check frame
      l_pHere=here(x_tTool,fSetFrame)
      pPoints[1].trsf=position(pPoints[1],fSetFrame)
      if l_pHere.trsf.x>=0 and l_pHere.trsf.x<=pPoints[1].trsf.x and abs(l_pHere.trsf.y)<10 and abs(l_pHere.trsf.z)<10
        // set to linear
        x_nMoveType=1
      endIf
    endIf
  endIf
  //
  // move back
  //
  if x_nIndex<(l_nSize-1) and x_nMoveType!=1
    call getMoveType(l_nMoveType,x_nIndex+1,false)
    if l_nMoveType==1
      // get the point and the circle point
      call getPoint(l_pPoint,false,x_nIndex)
      pPoints[1].trsf=position(l_pPoint,world)
      // get the point and the circle point
      call getPoint(l_pPoint,false,x_nIndex+1)
      pPoints.trsf=position(l_pPoint,world)
      if distance(l_pHere,pPoints)<25
        // switch to linear
        x_nMoveType=1
      elseIf setFrame(pPoints,pPoints[1],pPoints[2],fSetFrame)==0
        // check frame
        l_pHere=here(x_tTool,fSetFrame)
        pPoints[1].trsf=position(pPoints[1],fSetFrame)
        if l_pHere.trsf.x>=0 and l_pHere.trsf.x<=pPoints[1].trsf.x and abs(l_pHere.trsf.y)<10 and abs(l_pHere.trsf.z)<10
          // set to linear
          x_nMoveType=1
        endIf
      endIf
    endIf
  endIf
end]]></Code>
  </Program>
</Programs>