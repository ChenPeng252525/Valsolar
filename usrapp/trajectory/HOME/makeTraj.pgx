<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="makeTraj">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nJointStart" type="num" xsi:type="element" />
      <Parameter name="x_sTrajLoad" type="string" xsi:type="element" />
    </Parameters>
    <Locals>
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_bToStop" type="bool" xsi:type="array" size="2" />
      <Local name="l_nSize" type="num" xsi:type="array" size="1" />
      <Local name="l_tTool" type="tool" xsi:type="array" size="1" />
      <Local name="l_nSpeed" type="num" xsi:type="array" size="2" />
      <Local name="l_mDesc" type="mdesc" xsi:type="array" size="2" />
      <Local name="l_nDistance" type="num" xsi:type="array" size="2" />
      <Local name="l_nMoveType" type="num" xsi:type="array" size="2" />
      <Local name="l_pAction" type="point" xsi:type="array" size="1" />
      <Local name="l_bUnreached" type="bool" xsi:type="array" size="1" />
      <Local name="l_nStop" type="num" xsi:type="array" size="1" />
      <Local name="l_pCheck" type="point" xsi:type="array" size="3" />
      <Local name="l_pHere" type="point" xsi:type="array" size="1" />
      <Local name="l_fPlane" type="frame" xsi:type="array" size="1" />
      <Local name="l_nTime" type="num" xsi:type="array" size="1" />
      <Local name="l_sType" type="string" xsi:type="array" size="1" />
      <Local name="l_sMessage" type="string" xsi:type="array" size="1" />
      <Local name="l_bConnection" type="bool" xsi:type="array" size="1" />
      <Local name="l_nMoveId" type="num" xsi:type="array" size="1" />
      <Local name="l_tTraj" type="TrajectoryItem" xsi:type="array" size="1" />
      <Local name="l_jJoint" type="joint" xsi:type="array" size="1" />
      <Local name="l_aAction" type="ActionItem" xsi:type="array" size="1" />
      <Local name="j" type="num" xsi:type="array" size="1" />
      <Local name="l_bGoToCloseP" type="bool" xsi:type="array" size="1" />
      <Local name="l_pHereJ" type="point" xsi:type="array" size="1" />
      <Local name="l_jResult" type="joint" xsi:type="array" size="1" />
      <Local name="l_bOk" type="bool" xsi:type="array" size="1" />
      <Local name="i_from" type="num" xsi:type="array" size="1" />
      <Local name="i_to" type="num" xsi:type="array" size="1" />
      <Local name="l_jHere" type="joint" xsi:type="array" size="1" />
      <Local name="l_jRunJoint" type="joint" xsi:type="array" size="2" />
    </Locals>
    <Code><![CDATA[begin
  //
  // inizialize the system
  //
  // use the flange
  l_tTool=flange
  // the maximum size
  call getSizeItem(true,l_nSize)
  //
  // first go near by straight line of the two previous points
  //
  if pt:tTraj[sTrajCycle].nZoneType!=0 and x_nJointStart==0
    // use of the ZONE TYPE
    switch pt:tTraj[sTrajCycle].nZoneMove
      case 0
        l_sType="POINT"
      break
      case 1
        l_sType="APPRO"
      break
      case 2
        l_sType="Z VALUE"
      break
      case 3
        l_sType="@Point"
      break
      case 4
        l_sType="@JPoint"
      break
    endSwitch
    cycleStatus:sToShow="Move using: "+l_sType+toString("",x_nJointStart)+"# of the home: "+x_sTrajLoad
    logMsg("HOMING: "+l_sMessage)
    call getPointData(l_nSpeed,l_mDesc,l_nDistance,l_bToStop,l_nMoveType,l_nStop,0,true)
    call moveTo(l_tTool,l_mDesc,l_nMoveType,l_bUnreached,0,l_nMoveId,true)
    waitEndMove()
    // set the start point
    x_nJointStart=1
  elseIf saveData:bUseHomeScanner
    // look FORWARD
    if x_nJointStart<l_nSize-1
      // get all the JOINT
      call getJointData(l_jRunJoint[0],l_tTool,true,x_nJointStart+1)
      call getJointData(l_jRunJoint[1],l_tTool,true,x_nJointStart)
      // look if there is
      if setFrame(jointToPoint(l_tTool,world,l_jRunJoint[0]),jointToPoint(l_tTool,world,l_jRunJoint[1]),pNull,fFrame)==0
        pCheck=here(l_tTool,fFrame)
        if pCheck.trsf.x>=0
          //
          // go to nearest point
          //
          call getPoint(l_pCheck[0],true,x_nJointStart+1)
          call getPoint(l_pCheck[1],true,x_nJointStart)
          x_nJointStart=x_nJointStart+1
          l_bGoToCloseP=true
        endIf
      endIf
    endIf
    // LOOK BACKWARD
    if !l_bGoToCloseP and x_nJointStart>0
      // get all the JOINT
      call getJointData(l_jRunJoint[0],l_tTool,true,x_nJointStart)
      call getJointData(l_jRunJoint[1],l_tTool,true,x_nJointStart-1)
      // look if there is
      if setFrame(jointToPoint(l_tTool,world,l_jRunJoint[0]),jointToPoint(l_tTool,world,l_jRunJoint[1]),pNull,fFrame)==0
        pCheck=here(l_tTool,fFrame)
        if pCheck.trsf.x>=0
          //
          // go to nearest point
          //
          call getPoint(l_pCheck[0],true,x_nJointStart)
          call getPoint(l_pCheck[1],true,x_nJointStart-1)
          l_bGoToCloseP=true
        endIf
      endIf
    endIf
    // go to an approach POINT
    if l_bGoToCloseP
      // init
      l_pCheck[2]=here(l_tTool,world)
      l_pHere=here(l_tTool,world)
      l_pHereJ=here(flange,world)
      l_nDistance=10000
      // check the nearest point
      l_nMoveType=pt:tTraj[sTrajCycle].tData[x_nJointStart].tSuper.moveType
      for i=0 to 1 step 0.1
        if l_nMoveType==0
          call interpolateJ(l_jRunJoint[1],l_jRunJoint[0],i,l_jResult,l_bOk)
          l_pCheck[2]=jointToPoint(flange,world,l_jResult)
          if l_nDistance>=distance(l_pCheck[2],l_pHereJ)
            l_nDistance=distance(l_pCheck[2],l_pHereJ)
            //save the value
            l_nStop=i
          endIf
        else
          l_pCheck[2].trsf=interpolateL(l_pCheck[1].trsf,l_pCheck[0].trsf,i)
          l_bOk=true
          if l_nDistance>=distance(l_pCheck[2],l_pHere)
            l_nDistance=distance(l_pCheck[2],l_pHere)
            //save the value
            l_nStop=i
          endIf
        endIf
      endFor
      // closer search
      i_from=(max(l_nStop-0.05,0))
      i_to=(min(l_nStop+0.05,1))
      for i=i_from to i_to step 0.01
        if l_nMoveType==0
          call interpolateJ(l_jRunJoint[1],l_jRunJoint[0],i,l_jResult,l_bOk)
          l_pCheck[2]=jointToPoint(flange,world,l_jResult)
          if l_nDistance>=distance(l_pCheck[2],l_pHereJ)
            l_nDistance=distance(l_pCheck[2],l_pHereJ)
            //save the value
            l_nStop=i
          endIf
        else
          l_pCheck[2].trsf=interpolateL(l_pCheck[1].trsf,l_pCheck[0].trsf,i)
          l_bOk=true
          if l_nDistance>=distance(l_pCheck[2],l_pHere)
            l_nDistance=distance(l_pCheck[2],l_pHere)
            //save the value
            l_nStop=i
          endIf
        endIf
      endFor
      // set the best one
      call getPointData(l_nSpeed,l_mDesc,l_nDistance,l_bToStop,l_nMoveType,l_nStop,x_nJointStart,true)
      l_jHere=herej()
      if l_nMoveType==0
        call interpolateJ(l_jRunJoint[1],l_jRunJoint[0],l_nStop,l_jResult,l_bOk)
        l_pCheck[2]=jointToPoint(flange,world,l_jResult)
        // put the wrist on free
        l_pCheck[2].config.wrist=wfree
        if pointToJoint(l_tTool,herej(),l_pCheck[2],l_jHere)
          movej(l_pCheck[2],flange,l_mDesc)
        endIf
      else
        l_pCheck[2].trsf=interpolateL(l_pCheck[1].trsf,l_pCheck[0].trsf,l_nStop)
        // put the wrist on free
        l_pCheck[2].config.wrist=wfree
        if pointToJoint(l_tTool,herej(),l_pCheck[2],l_jHere)
          movej(l_pCheck[2],l_tTool,l_mDesc)
        endIf
      endIf
      // show the message
      cycleStatus:sToShow="Move to point: "+toString("",x_nJointStart+1)+" of: "+x_sTrajLoad +" % "+toString(".3",l_nStop)
      logMsg("HOMING: "+cycleStatus:sToShow)
      waitEndMove()
    endIf
  endIf
  //
  // for all of my traj cyclePoints move the robot
  //
  resize(tTraj.tSuper,1,size(pt:tTraj[sTrajCycle].tData))
  for i=x_nJointStart to (l_nSize-1)
    tTraj.tSuper[i]=pt:tTraj[sTrajCycle].tData[i].tSuper
  endFor
  tTraj.sID="HOME "+pt:tTraj[sTrajCycle].sID
  call cycleStatus:addTraj(tTraj)
  // show the message
  cycleStatus:sToShow="Moving from point: "+toString("",x_nJointStart+1)+" of : "+x_sTrajLoad
  logMsg("HOMING: "+cycleStatus:sToShow)
  for i=x_nJointStart to (l_nSize-1)
    //
    // get the point info
    //
    l_tTraj=pt:tTraj[sTrajCycle].tData[i].tSuper
    //
    // get the distance in percentage
    //
    call getDistance(l_tTool,l_nDistance,true,i)
    //
    // give to the traj library the percentage distance
    //
    if l_tTraj.toStop
      l_tTraj.nom_speed.blend=off
    endIf
    //
    // put the move in the stack
    //
    l_jJoint=pt:tTraj[sTrajCycle].tData[i].jJoint
    call moveTo(l_tTool,l_tTraj.nom_speed,l_tTraj.moveType,l_bUnreached,i,l_nMoveId,true)
    // set the data
    l_aAction.nDistance=l_nDistance
    l_aAction.nPointId=i
    l_aAction.nMoveId=l_nMoveId
    l_aAction.sIdTraj="HOME "+pt:tTraj[sTrajCycle].sID
    call cycleStatus:putInstr_Traj(l_aAction,l_tTraj,pt:tTraj[sTrajCycle].nIndexTool,l_nSize)
    // there is a waitEndMove 
    if l_tTraj.toStop
      waitEndMove()
      delay(l_tTraj.nStop)
      // wait all the action has been done
      wait(cycleStatus:bActionRunning==false)
    endIf
  endFor
end]]></Code>
  </Program>
</Programs>