<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="makeTraj" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_sItem" type="string" xsi:type="array" use="reference" />
    </Parameters>
    <Locals>
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_nDistance" type="num" xsi:type="array" size="1" />
      <Local name="l_nSize" type="num" xsi:type="array" size="1" />
      <Local name="l_tTool" type="tool" xsi:type="array" size="1" />
      <Local name="l_bToStop" type="bool" xsi:type="array" size="1" />
      <Local name="l_mDesc" type="mdesc" xsi:type="array" size="1" />
      <Local name="l_nMoveId" type="num" xsi:type="array" size="1" />
      <Local name="l_bOk" type="bool" xsi:type="array" size="1" />
      <Local name="l_sType" type="string" xsi:type="array" size="1" />
      <Local name="l_tTraj" type="TrajectoryItem" xsi:type="array" size="1" />
      <Local name="l_aAction" type="ActionItem" xsi:type="array" size="1" />
      <Local name="l_pPoint" type="point" xsi:type="array" size="2" />
    </Locals>
    <Code><![CDATA[begin
  // take the TOOL
  call tcp:getTool(l_tTool,pt:tTraj[sTrajCycle].nIndexTool)
  // the maximum size
  call getSizeItem(true,l_nSize)
  //
  // for all of my traj cyclePoints move the robot
  //
  resize(tTraj.tSuper,1,size(pt:tTraj[sTrajCycle].tData))
  for i=0 to (l_nSize-1)
    tTraj.tSuper[i]=pt:tTraj[sTrajCycle].tData[i].tSuper
  endFor
  tTraj.sID="TRAJ "+pt:tTraj[sTrajCycle].sID
  call cycleStatus:addTraj(tTraj)
  //
  // for all of my traj cyclePoints move the robot
  //
  for i=0 to (l_nSize-1)
    //
    // get the point info
    //
    l_tTraj=pt:tTraj[sTrajCycle].tData[i].tSuper
    call getPoint(l_pPoint,true,i)
    //
    // get the distance in percentage
    call getDistance(l_tTool,l_nDistance,true,i)
    //
    // give to the traj library the percentage distance
    //
    if l_bToStop
      l_tTraj.nom_speed.blend=off
    elseIf l_tTraj.moveType!=0
      l_tTraj.nom_speed.blend=Cartesian
    endIf
    //
    // put the move in the stack
    //
    switch l_tTraj.moveType
      case 0
        // or is not in range
        l_nMoveId=movej(l_pPoint,l_tTool,l_tTraj.nom_speed)
      break
      case 1
        l_nMoveId=movel(l_pPoint,l_tTool,l_tTraj.nom_speed)
      break
      case 2
        l_nMoveId=movec(l_pPoint[1],l_pPoint,l_tTool,l_tTraj.nom_speed)
      break
    endSwitch
    //
    // set the ID  
    //
    l_aAction.nDistance=l_nDistance
    l_aAction.nPointId=i
    l_aAction.nMoveId=l_nMoveId
    l_aAction.sIdTraj="TRAJ "+pt:tTraj[sTrajCycle].sID
    call cycleStatus:putInstr_Traj(l_aAction,l_tTraj,pt:tTraj[sTrajCycle].nIndexTool,l_nSize)
    // there is a waitEndMove 
    if l_tTraj.toStop
      waitEndMove()
      delay(l_tTraj.nStop)
      // wait all the action has been done
      wait(cycleStatus:bActionRunning==false)
    endIf
  endFor
  // bye bye
end]]></Code>
  </Program>
</Programs>