<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="onStart" access="public">
    <Description><![CDATA[check and put all the boolean as the status of BIO-MIO-MODBUS-FIELDBUS-ARMIO]]></Description>
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_sItem" type="string" xsi:type="array" use="reference" />
    </Parameters>
    <Locals>
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_nModbusOut" type="num" xsi:type="array" size="1" />
      <Local name="l_nFieldbusOut" type="num" xsi:type="array" size="1" />
      <Local name="l_bChange" type="bool" xsi:type="array" size="1" />
      <Local name="l_nResult" type="num" xsi:type="array" size="1" />
      <Local name="l_sPath" type="string" xsi:type="array" size="1" />
      <Local name="l_bCheck" type="bool" xsi:type="array" size="1" />
      <Local name="l_sKey" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  if x_sItem=="init"
    //
    // DIGITAL INPUT
    //
    // set the default value
    call saveInOut:setOutput(0)
//    // BIO
//    call saveInOut:setOutput(1)
//    // BIO2 - MIO
//    call saveInOut:setOutput(2)
//    // MODBUS
//    call saveInOut:setOutput(3)
//    // USER
//    call saveInOut:setOutput(4)
//    // REMIO
    //    call saveInOut:setOutput(5)
    call saveInOut:setOutput(6)
    //
    // SAVE
    //
    call save(l_nResult)
    if l_nResult==0
      logMsg("[KERNEL] SUPERVISOR>Output: Save Done")
    else
      logMsg("error "+toString("",l_nResult)+" saving the saveInputOutput")
      popUpMsg("error "+toString("",l_nResult)+" saving the saveInputOutput")
    endIf
  endIf
  // build the list for easy access
  // start from the first
  resize(sKey,1,1)
  sKey=""
  if isDefined(saveInOut:dOutput["valve1"])
    sKey[0]="valve1"
  endIf
  if isDefined(saveInOut:dOutput["valve2"])
    append(sKey)
    sKey[1]="valve2"
  endIf
  if isDefined(saveInOut:dOutput["fOut0"])
    append(sKey)
    sKey[2]="fOut0"
  endIf
  l_sKey=first(saveInOut:dOutput)
  i=size(sKey)-1
  // search it
  //
  while l_sKey!=""
    if find(l_sKey,"valve")==-1 and find(l_sKey,"fOut")==-1
      if !(sKey[0]=="" and i==0)
        append(sKey)
        i=i+1
      endIf
      sKey[i]=l_sKey
    endIf
    l_sKey=next(saveInOut:dOutput[l_sKey])
  endWhile
end]]></Code>
  </Program>
</Programs>